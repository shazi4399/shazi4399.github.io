<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>钢条切割问题</title>
    <link href="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>动态规划通常用于解决最优化问题，在这类问题中，通过做出一组选择来达到最优解。在做出每个选择的同时，通常会生成与原问题形式相同的子问题。当多于一个选择子集都生成相同的子问题时，动态规划技术通常就会很有效，其关键技术就是对每个这样的子问题都保存其解，当其重复出现时即可避免重复求解。</p><h1 id="一-钢条切割问题"><a href="#一-钢条切割问题" class="headerlink" title="一 钢条切割问题"></a>一 钢条切割问题</h1><p>Serling公司购买长钢条，将其切割为短钢条出售。切割工序本身没有成本支出。公司管理层希望知道最佳的切割方案。假定我们知道Serling公司出售一段长为i英寸的钢条的价格为pi(i&#x3D;1,2,…，单位为美元)。钢条的长度均为整英寸。图15-1给出了一个价格表的样例。</p><p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/priceTable.png" alt="img"></p><p>钢条切割问题是这样的：给定一段长度为n英寸的钢条和一个价格表pi(i&#x3D;1,2,…n)，求切割钢条方案，使得销售收益rn最大。注意，如果长度为n英寸的钢条的价格pn足够大，最优解可能就是完全不需要切割。</p><h1 id="二-解决方案"><a href="#二-解决方案" class="headerlink" title="二 解决方案"></a>二 解决方案</h1><h2 id="1-暴力递归（多叉树遍历）"><a href="#1-暴力递归（多叉树遍历）" class="headerlink" title="1 暴力递归（多叉树遍历）"></a>1 暴力递归（多叉树遍历）</h2><p>时间复杂度：2^n</p><p><strong>伪代码如下：</strong></p><p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/dfs.png"></p><p><strong>代码实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方法一：暴力递归 2^n复杂度（多叉树遍历）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cutrod</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; p,<span class="hljs-type">int</span> n )</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> q = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br><span class="hljs-comment">//        int temp = p[i] + cutrod(p, n - i);</span><br><span class="hljs-comment">//        if(temp &gt; q)</span><br><span class="hljs-comment">//            q = temp;</span><br>        q = <span class="hljs-built_in">max</span>(q,p[i]+<span class="hljs-built_in">cutrod</span>(p, n-i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> q;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归过程：</strong></p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/example.jpg" style="zoom: 67%;"><h2 id="2-带备忘录的递归（自顶向下）"><a href="#2-带备忘录的递归（自顶向下）" class="headerlink" title="2 带备忘录的递归（自顶向下）"></a>2 带备忘录的递归（自顶向下）</h2><p><strong>伪代码：</strong></p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/mem_cutrod.jpg" style="zoom: 50%;"><p><strong>代码实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方法2:带备忘录的递归（自顶向下）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mem_cutrodHelper</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; p,<span class="hljs-type">int</span> n,vector&lt;<span class="hljs-type">int</span>&gt; &amp; r)</span></span>&#123;<br>    <span class="hljs-comment">//首先检查所需的值是否存在</span><br>    <span class="hljs-keyword">if</span>(r[n] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> r[n];<br>    <br>    <span class="hljs-type">int</span> q = INT_MIN;<span class="hljs-comment">//q是盈利</span><br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br>        q = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n; ++i)&#123;<br>            q = <span class="hljs-built_in">max</span>(q,p[i]+<span class="hljs-built_in">mem_cutrodHelper</span>(p, n-i, r));<br>        &#125;<br>    &#125;<br>    r[n] = q;<br>    <span class="hljs-keyword">return</span> q;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mem_cutrod</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; p,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">r</span><span class="hljs-params">(n + <span class="hljs-number">1</span>,<span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">mem_cutrodHelper</span>(p,n,r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-动态规划（自底向上）"><a href="#3-动态规划（自底向上）" class="headerlink" title="3 动态规划（自底向上）"></a>3 动态规划（自底向上）</h2><p><strong>伪代码：</strong></p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/dp_cutrod.jpg" style="zoom:67%;"><p><strong>代码实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方法3-1:动态规划</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp_cutrod</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; p,<span class="hljs-type">int</span> n )</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//dp[i]表示 i长的钢条，最大收益是多少。</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//动态规划的第一步，初始化非常重要。最小的最优子结构一定正确。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-type">int</span> q = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span> ; j &lt;= i;++j)&#123;<br>            q = <span class="hljs-built_in">max</span>(q,p[j] + dp[i -j]);<span class="hljs-comment">//状态转移方程。</span><br>        &#125;<br>        dp[i] = q;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br><span class="hljs-comment">//方法3-2:直接套用状态方程   dp[i] = max(dp[i],p[j] + dp[i -j])</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp_cutrod2</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; p,<span class="hljs-type">int</span> n )</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//dp[i]表示 i长的钢条，最大收益是多少。</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//动态规划的第一步，初始化非常重要。最小的最优子结构一定要正确。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span> ; j &lt;= i;++j)&#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i],p[j] + dp[i -j]);<span class="hljs-comment">//状态转移方程。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-代码重构"><a href="#4-代码重构" class="headerlink" title="4 代码重构"></a>4 代码重构</h2><p><strong>伪代码：</strong></p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/print_cutrod1.jpg" style="zoom:50%;"><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/print_cutrod2.jpg" style="zoom:50%;"><p><strong>代码实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方法4 重构的代码：可以输出最优切割方案，并打印出dp数组。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">print_dp_cutrod</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; p,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cutpos</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//存储长度为i的钢条 最优切割位置</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-type">int</span> q = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)&#123;<br>            <span class="hljs-comment">//要想能够对切割方案进行输出，就不能一股脑的简化代码，</span><br>            <span class="hljs-comment">//要对代码进行细粒度控制。把控好每一步。</span><br>            <span class="hljs-type">int</span> temp = p[j] + dp[i - j];<br>            <span class="hljs-keyword">if</span>(q &lt; temp)&#123;<br>                q = temp;<br>                cutpos[i] = j;<br>            &#125;<br>        &#125;<br>        dp[i] = q;<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;钢条的切割位置：&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n+<span class="hljs-number">1</span>;i++)&#123;<br>        std::cout&lt;&lt; cutpos[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;dp数组：&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; dp.<span class="hljs-built_in">size</span>();i++)&#123;<br>        cout&lt;&lt;dp[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;最优切割策略: &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = cutpos.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i &gt; <span class="hljs-number">0</span>; i -= cutpos[i])&#123;<br>        cout&lt;&lt;cutpos[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>正确输出：</strong></p><p><img src="/2022/04/14/%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/print_cutrod3.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/13/hello-world/"/>
    <url>/2022/04/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
